"""new table creation

Revision ID: 12de7e4b8be7
Revises: 84a859daead0
Create Date: 2025-04-14 13:19:16.843304

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column, select


# revision identifiers, used by Alembic.
revision: str = '12de7e4b8be7'
down_revision: Union[str, None] = '84a859daead0'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('chats',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('chat_id', sa.String(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('messages', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_chats_chat_id'), 'chats', ['chat_id'], unique=True)
    op.create_index(op.f('ix_chats_id'), 'chats', ['id'], unique=False)
    op.create_index(op.f('ix_chats_user_id'), 'chats', ['user_id'], unique=False)
    op.alter_column('users', 'password',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.execute('ALTER TABLE users ALTER COLUMN role TYPE INTEGER USING role::integer')

    # Create the 'role' table
    op.create_table(
        'role',
        sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
        sa.Column('roles', sa.String(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_role_id'), 'role', ['id'], unique=False)

    # Define the 'role' table structure for inserting data
    role_table = table(
        'role',
        column('id', sa.Integer),
        column('roles', sa.String)
    )

    # Data to be inserted
    rows = [
        {'id': 1, 'roles': 'Super Admin'},
        {'id': 2, 'roles': 'Admin'},
        {'id': 3, 'roles': 'Student'},
        {'id': 4, 'roles': 'General'}
    ]

    # Connect to the database and get the existing IDs
    conn = op.get_bind()
    existing_ids = conn.execute(select(role_table.c.id)).fetchall()
    existing_ids = {row[0] for row in existing_ids}

    # Filter out rows with IDs that already exist
    rows_to_insert = [row for row in rows if row['id'] not in existing_ids]

    # Insert only the new rows
    if rows_to_insert:
        op.bulk_insert(role_table, rows_to_insert)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute('ALTER TABLE users ALTER COLUMN role TYPE VARCHAR(50) USING role::varchar')
    op.alter_column('users', 'password',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.drop_index(op.f('ix_chats_user_id'), table_name='chats')
    op.drop_index(op.f('ix_chats_id'), table_name='chats')
    op.drop_index(op.f('ix_chats_chat_id'), table_name='chats')
    op.drop_table('chats')
    op.drop_index(op.f('ix_role_id'), table_name='role')
    op.drop_table('role')
    # ### end Alembic commands ###
